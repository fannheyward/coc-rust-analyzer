{
  "name": "coc-rust-analyzer",
  "version": "0.59.0",
  "description": "rust-analyzer for Vim/Neovim, works as an extension with coc.nvim",
  "author": "Heyward Fann <fannheyward@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/fannheyward/coc-rust-analyzer.git"
  },
  "engines": {
    "coc": "^0.0.80"
  },
  "activationEvents": [
    "onLanguage:rust",
    "workspaceContains:**/Cargo.toml"
  ],
  "scripts": {
    "clean": "rimraf lib",
    "lint": "eslint src --ext ts",
    "schema": "node ./generate-config-schema.js",
    "build": "node esbuild.js",
    "watch": "node esbuild.js --watch",
    "prepare": "node esbuild.js"
  },
  "devDependencies": {
    "@types/node": "^17.0.5",
    "@types/node-fetch": "2",
    "@types/which": "^2.0.0",
    "@typescript-eslint/eslint-plugin": "^5.4.0",
    "@typescript-eslint/parser": "^5.4.0",
    "coc.nvim": "^0.0.81-next.7",
    "esbuild": "^0.14.2",
    "eslint": "^8.2.0",
    "https-proxy-agent": "^5.0.0",
    "node-fetch": "^2.6.0",
    "rimraf": "^3.0.0",
    "typescript": "^4.4.4",
    "vscode-languageserver-protocol": "^3.16.0",
    "which": "^2.0.2"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 180,
    "semi": true
  },
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "rust",
        "patterns": [
          "Cargo.toml",
          "rust-project.json"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-rust-analyzer configuration",
      "properties": {
        "rust-analyzer.enable": {
          "type": "boolean",
          "default": true
        },
        "rust-analyzer.terminal.startinsert": {
          "type": "boolean",
          "default": false,
          "description": "Enter insert mode after terminal displayed"
        },
        "rust-analyzer.debug.runtime": {
          "type": "string",
          "default": "termdebug",
          "enum": [
            "termdebug",
            "vimspector"
          ],
          "description": "Choose which debug runtime to use",
          "enumDescriptions": [
            "`\"termdebug\"` use vim/neovim builtin debugger - gdb",
            "`\"vimspector\"` use vimspector plugin"
          ]
        },
        "rust-analyzer.debug.vimspector.configuration.name": {
          "type": "string",
          "default": "launch",
          "description": "Specify the name of the vimspector configuration name. The following args will be passed to the configuration: `Executable` and `Args` (both strings)"
        },
        "rust-analyzer.inlayHints.enable": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show inlay hints"
        },
        "rust-analyzer.inlayHints.typeHintsSeparator": {
          "type": "string",
          "default": "‣",
          "description": "Separator text for typeHints in virtual text"
        },
        "rust-analyzer.inlayHints.typeHintsWithVariable": {
          "type": "boolean",
          "default": true,
          "description": "Show typeHints with variables name"
        },
        "rust-analyzer.inlayHints.chainingHintsSeparator": {
          "type": "string",
          "default": "‣",
          "description": "Separator text for chainingHints in virtual text"
        },
        "rust-analyzer.inlayHints.refreshOnInsertMode": {
          "type": "boolean",
          "default": false,
          "description": "Whether to refresh inlayHints on insert mode"
        },
        "rust-analyzer.server.path": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "Path to rust-analyzer executable (points to bundled binary by default). If this is set, then \"rust-analyzer.updates.channel\" setting is not used"
        },
        "rust-analyzer.server.extraEnv": {
          "type": [
            "null",
            "object"
          ],
          "default": null,
          "markdownDescription": "Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging."
        },
        "rust-analyzer.trace.server": {
          "type": "string",
          "scope": "window",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "enumDescriptions": [
            "No traces",
            "Error only",
            "Full log"
          ],
          "default": "off",
          "description": "Trace requests to the rust-analyzer"
        },
        "rust-analyzer.updates.prompt": {
          "type": [
            "boolean",
            "string"
          ],
          "enum": [
            true,
            false,
            "neverDownload"
          ],
          "default": true,
          "description": "Prompt the user before downloading rust-analyzer"
        },
        "rust-analyzer.updates.checkOnStartup": {
          "type": "boolean",
          "default": true,
          "description": "Auto-check rust-analyzer updates on startup"
        },
        "rust-analyzer.updates.channel": {
          "type": "string",
          "default": "stable",
          "enum": [
            "stable",
            "nightly"
          ],
          "description": "Choose `\"nightly\"` updates to get the latest features and bug fixes every day. While `\"stable\"` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs",
          "enumDescriptions": [
            "`\"stable\"` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general",
            "`\"nightly\"` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**"
          ]
        },
        "rust-analyzer.assist.importGranularity": {
          "markdownDescription": "How imports should be grouped into use statements.",
          "default": "crate",
          "type": "string",
          "enum": [
            "preserve",
            "crate",
            "module",
            "item"
          ],
          "enumDescriptions": [
            "Do not change the granularity of any imports and preserve the original structure written by the developer.",
            "Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.",
            "Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.",
            "Flatten imports so that each has its own use statement."
          ]
        },
        "rust-analyzer.assist.importEnforceGranularity": {
          "markdownDescription": "Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.",
          "default": false,
          "type": "boolean"
        },
        "rust-analyzer.assist.importPrefix": {
          "markdownDescription": "The path structure for newly inserted paths to use.",
          "default": "plain",
          "type": "string",
          "enum": [
            "plain",
            "self",
            "crate"
          ],
          "enumDescriptions": [
            "Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.",
            "Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.",
            "Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."
          ]
        },
        "rust-analyzer.assist.importGroup": {
          "markdownDescription": "Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.assist.allowMergingIntoGlobImports": {
          "markdownDescription": "Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.cache.warmup": {
          "markdownDescription": "Warm up caches on project load.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.callInfo.full": {
          "markdownDescription": "Show function name and docs in parameter hints.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.cargo.autoreload": {
          "markdownDescription": "Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` changes.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.cargo.allFeatures": {
          "markdownDescription": "Activate all available features (`--all-features`).",
          "default": false,
          "type": "boolean"
        },
        "rust-analyzer.cargo.unsetTest": {
          "markdownDescription": "Unsets `#[cfg(test)]` for the specified crates.",
          "default": [
            "core"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.cargo.features": {
          "markdownDescription": "List of features to activate.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.cargo.runBuildScripts": {
          "markdownDescription": "Run build scripts (`build.rs`) for more precise code analysis.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.cargo.useRustcWrapperForBuildScripts": {
          "markdownDescription": "Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid compiling unnecessary things.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.cargo.noDefaultFeatures": {
          "markdownDescription": "Do not activate the `default` feature.",
          "default": false,
          "type": "boolean"
        },
        "rust-analyzer.cargo.target": {
          "markdownDescription": "Compilation target (target triple).",
          "default": null,
          "type": [
            "null",
            "string"
          ]
        },
        "rust-analyzer.cargo.noSysroot": {
          "markdownDescription": "Internal config for debugging, disables loading of sysroot crates.",
          "default": false,
          "type": "boolean"
        },
        "rust-analyzer.checkOnSave.enable": {
          "markdownDescription": "Run specified `cargo check` command for diagnostics on save.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.checkOnSave.allFeatures": {
          "markdownDescription": "Check with all features (`--all-features`).\nDefaults to `#rust-analyzer.cargo.allFeatures#`.",
          "default": null,
          "type": [
            "null",
            "boolean"
          ]
        },
        "rust-analyzer.checkOnSave.allTargets": {
          "markdownDescription": "Check all targets and tests (`--all-targets`).",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.checkOnSave.command": {
          "markdownDescription": "Cargo command to use for `cargo check`.",
          "default": "check",
          "type": "string"
        },
        "rust-analyzer.checkOnSave.noDefaultFeatures": {
          "markdownDescription": "Do not activate the `default` feature.",
          "default": null,
          "type": [
            "null",
            "boolean"
          ]
        },
        "rust-analyzer.checkOnSave.target": {
          "markdownDescription": "Check for a specific target. Defaults to\n`#rust-analyzer.cargo.target#`.",
          "default": null,
          "type": [
            "null",
            "string"
          ]
        },
        "rust-analyzer.checkOnSave.extraArgs": {
          "markdownDescription": "Extra arguments for `cargo check`.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.checkOnSave.features": {
          "markdownDescription": "List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.",
          "default": null,
          "type": [
            "null",
            "array"
          ],
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.checkOnSave.overrideCommand": {
          "markdownDescription": "Advanced option, fully override the command rust-analyzer uses for\nchecking. The command should include `--message-format=json` or\nsimilar option.",
          "default": null,
          "type": [
            "null",
            "array"
          ],
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.completion.addCallArgumentSnippets": {
          "markdownDescription": "Whether to add argument snippets when completing functions.\nOnly applies when `#rust-analyzer.completion.addCallParenthesis#` is set.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.completion.addCallParenthesis": {
          "markdownDescription": "Whether to add parenthesis when completing functions.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.completion.snippets": {
          "markdownDescription": "Custom completion snippets.",
          "default": {
            "Arc::new": {
              "postfix": "arc",
              "body": "Arc::new(${receiver})",
              "requires": "std::sync::Arc",
              "description": "Put the expression into an `Arc`",
              "scope": "expr"
            },
            "Rc::new": {
              "postfix": "rc",
              "body": "Rc::new(${receiver})",
              "requires": "std::rc::Rc",
              "description": "Put the expression into an `Rc`",
              "scope": "expr"
            },
            "Box::pin": {
              "postfix": "pinbox",
              "body": "Box::pin(${receiver})",
              "requires": "std::boxed::Box",
              "description": "Put the expression into a pinned `Box`",
              "scope": "expr"
            },
            "Ok": {
              "postfix": "ok",
              "body": "Ok(${receiver})",
              "description": "Wrap the expression in a `Result::Ok`",
              "scope": "expr"
            },
            "Err": {
              "postfix": "err",
              "body": "Err(${receiver})",
              "description": "Wrap the expression in a `Result::Err`",
              "scope": "expr"
            },
            "Some": {
              "postfix": "some",
              "body": "Some(${receiver})",
              "description": "Wrap the expression in an `Option::Some`",
              "scope": "expr"
            }
          },
          "type": "object"
        },
        "rust-analyzer.completion.postfix.enable": {
          "markdownDescription": "Whether to show postfix snippets like `dbg`, `if`, `not`, etc.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.completion.autoimport.enable": {
          "markdownDescription": "Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.completion.autoself.enable": {
          "markdownDescription": "Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.diagnostics.enable": {
          "markdownDescription": "Whether to show native rust-analyzer diagnostics.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.diagnostics.enableExperimental": {
          "markdownDescription": "Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.diagnostics.disabled": {
          "markdownDescription": "List of rust-analyzer diagnostics to disable.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "rust-analyzer.diagnostics.remapPrefix": {
          "markdownDescription": "Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.",
          "default": {},
          "type": "object"
        },
        "rust-analyzer.diagnostics.warningsAsHint": {
          "markdownDescription": "List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.diagnostics.warningsAsInfo": {
          "markdownDescription": "List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.experimental.procAttrMacros": {
          "markdownDescription": "Expand attribute macros.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.files.watcher": {
          "markdownDescription": "Controls file watching implementation.",
          "default": "client",
          "type": "string"
        },
        "rust-analyzer.files.excludeDirs": {
          "markdownDescription": "These directories will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.highlightRelated.references": {
          "markdownDescription": "Enables highlighting of related references while hovering your mouse above any identifier.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.highlightRelated.exitPoints": {
          "markdownDescription": "Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.highlightRelated.breakPoints": {
          "markdownDescription": "Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.highlightRelated.yieldPoints": {
          "markdownDescription": "Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.highlighting.strings": {
          "markdownDescription": "Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.hover.documentation": {
          "markdownDescription": "Whether to show documentation on hover.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.hover.linksInHover": {
          "markdownDescription": "Use markdown syntax for links in hover.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.hoverActions.enable": {
          "markdownDescription": "Whether to show HoverActions in Rust files.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.inlayHints.chainingHints": {
          "markdownDescription": "Whether to show inlay type hints for method chains.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.inlayHints.maxLength": {
          "markdownDescription": "Maximum length for inlay hints. Set to null to have an unlimited length.",
          "default": 25,
          "type": [
            "null",
            "integer"
          ],
          "minimum": 0
        },
        "rust-analyzer.inlayHints.typeHints": {
          "markdownDescription": "Whether to show inlay type hints for variables.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.inlayHints.hideNamedConstructorHints": {
          "markdownDescription": "Whether to hide inlay hints for constructors.",
          "default": false,
          "type": "boolean"
        },
        "rust-analyzer.joinLines.joinElseIf": {
          "markdownDescription": "Join lines inserts else between consecutive ifs.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.joinLines.removeTrailingComma": {
          "markdownDescription": "Join lines removes trailing commas.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.joinLines.unwrapTrivialBlock": {
          "markdownDescription": "Join lines unwraps trivial blocks.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.joinLines.joinAssignments": {
          "markdownDescription": "Join lines merges consecutive declaration and initialization of an assignment.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.lens.enable": {
          "markdownDescription": "Whether to show CodeLens in Rust files. You also need to enable `codeLens.enable` in coc-settings.json.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.lens.implementations": {
          "markdownDescription": "Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.lens.run": {
          "markdownDescription": "Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.lens.methodReferences": {
          "markdownDescription": "Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
          "default": false,
          "type": "boolean"
        },
        "rust-analyzer.lens.references": {
          "markdownDescription": "Whether to show `References` lens for Struct, Enum, Union and Trait.\nOnly applies when `#rust-analyzer.lens.enable#` is set.",
          "default": false,
          "type": "boolean"
        },
        "rust-analyzer.lens.enumVariantReferences": {
          "markdownDescription": "Whether to show `References` lens for Enum Variants.\nOnly applies when `#rust-analyzer.lens.enable#` is set.",
          "default": false,
          "type": "boolean"
        },
        "rust-analyzer.lens.forceCustomCommands": {
          "markdownDescription": "Internal config: use custom client-side commands even when the\nclient doesn't set the corresponding capability.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.linkedProjects": {
          "markdownDescription": "Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, or JSON objects in `rust-project.json` format.",
          "default": [],
          "type": "array",
          "items": {
            "type": [
              "string",
              "object"
            ]
          }
        },
        "rust-analyzer.lruCapacity": {
          "markdownDescription": "Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.",
          "default": null,
          "type": [
            "null",
            "integer"
          ],
          "minimum": 0
        },
        "rust-analyzer.notifications.cargoTomlNotFound": {
          "markdownDescription": "Whether to show `can't find Cargo.toml` error message.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.procMacro.enable": {
          "markdownDescription": "Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.",
          "default": true,
          "type": "boolean"
        },
        "rust-analyzer.procMacro.server": {
          "markdownDescription": "Internal config, path to proc-macro server executable (typically,\nthis is rust-analyzer itself, but we override this in tests).",
          "default": null,
          "type": [
            "null",
            "string"
          ]
        },
        "rust-analyzer.runnables.overrideCargo": {
          "markdownDescription": "Command to be executed instead of 'cargo' for runnables.",
          "default": null,
          "type": [
            "null",
            "string"
          ]
        },
        "rust-analyzer.runnables.cargoExtraArgs": {
          "markdownDescription": "Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.rustcSource": {
          "markdownDescription": "Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted.",
          "default": null,
          "type": [
            "null",
            "string"
          ]
        },
        "rust-analyzer.rustfmt.extraArgs": {
          "markdownDescription": "Additional arguments to `rustfmt`.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.rustfmt.overrideCommand": {
          "markdownDescription": "Advanced option, fully override the command rust-analyzer uses for\nformatting.",
          "default": null,
          "type": [
            "null",
            "array"
          ],
          "items": {
            "type": "string"
          }
        },
        "rust-analyzer.rustfmt.enableRangeFormatting": {
          "markdownDescription": "Enables the use of rustfmt's unstable range formatting command for the\n`textDocument/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build.",
          "default": false,
          "type": "boolean"
        },
        "rust-analyzer.workspace.symbol.search.scope": {
          "markdownDescription": "Workspace symbol search scope.",
          "default": "workspace",
          "type": "string",
          "enum": [
            "workspace",
            "workspace_and_dependencies"
          ],
          "enumDescriptions": [
            "Search in current workspace only",
            "Search in current workspace and dependencies"
          ]
        },
        "rust-analyzer.workspace.symbol.search.kind": {
          "markdownDescription": "Workspace symbol search kind.",
          "default": "only_types",
          "type": "string",
          "enum": [
            "only_types",
            "all_symbols"
          ],
          "enumDescriptions": [
            "Search for types only",
            "Search for all symbols kinds"
          ]
        }
      }
    },
    "commands": [
      {
        "command": "rust-analyzer.analyzerStatus",
        "title": "Status",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.memoryUsage",
        "title": "Memory Usage (Clears Database)",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.reloadWorkspace",
        "title": "Reload workspace",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.joinLines",
        "title": "Join lines",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.matchingBrace",
        "title": "Find matching brace",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.openDocs",
        "title": "Open docs under cursor",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.openCargoToml",
        "title": "Open Cargo.toml",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.parentModule",
        "title": "Locate parent module",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.reload",
        "title": "Restart server",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.run",
        "title": "Run",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.debug",
        "title": "Debug",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.ssr",
        "title": "Structural Search Replace",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.serverVersion",
        "title": "Show current Rust Analyzer server version",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.syntaxTree",
        "title": "Show Syntax Tree",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.toggleInlayHints",
        "title": "Toggle inlay hints on/off",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.upgrade",
        "title": "Upgrade Rust Analyzer from GitHub release",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.expandMacro",
        "title": "Expand macro recursively",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.viewHir",
        "title": "View Hir",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.viewItemTree",
        "title": "Debug ItemTree",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.viewCrateGraph",
        "title": "View Crate Graph",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.viewFullCrateGraph",
        "title": "View Crate Graph (Full)",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.echoRunCommandLine",
        "title": "Echo Run Command Line",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.peekTests",
        "title": "Peek related tests",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.moveItemUp",
        "title": "Move item up",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.moveItemDown",
        "title": "Move item down",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.explainError",
        "title": "Explain the currently hovered diagnostic",
        "category": "Rust Analyzer"
      }
    ]
  }
}
