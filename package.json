{
  "name": "coc-rust-analyzer",
  "version": "0.7.14",
  "description": "rust-analyzer for Vim/Neovim, works as an extension with coc.nvim",
  "author": "Heyward Fann <fannheyward@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/fannheyward/coc-rust-analyzer.git"
  },
  "engines": {
    "coc": "^0.0.76"
  },
  "activationEvents": [
    "onLanguage:rust",
    "workspaceContains:**/Cargo.toml"
  ],
  "scripts": {
    "clean": "rimraf lib",
    "watch": "webpack --watch",
    "lint": "eslint src --ext ts",
    "build": "webpack",
    "prepare": "npm-run-all clean build"
  },
  "devDependencies": {
    "@types/node": "^14.0.14",
    "@types/node-fetch": "^2.5.7",
    "@types/which": "^1.3.2",
    "@typescript-eslint/eslint-plugin": "^3.5.0",
    "@typescript-eslint/parser": "^3.5.0",
    "coc.nvim": "^0.0.77",
    "eslint": "^7.3.0",
    "eslint-config-prettier": "^6.10.1",
    "eslint-plugin-prettier": "^3.1.4",
    "executable": "^4.1.1",
    "https-proxy-agent": "^5.0.0",
    "husky": "^4.2.1",
    "node-fetch": "^2.6.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.0.3",
    "rimraf": "^3.0.0",
    "shx": "^0.3.2",
    "ts-loader": "^8.0.0",
    "typescript": "^4.0.2",
    "vscode-languageserver-protocol": "^3.15.3",
    "webpack": "^4.42.1",
    "webpack-cli": "^3.3.12",
    "which": "^2.0.2"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 180,
    "semi": true
  },
  "husky": {
    "hooks": {
      "pre-push": "yarn lint"
    }
  },
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "rust",
        "patterns": [
          "Cargo.toml"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-rust-analyzer configuration",
      "properties": {
        "rust-analyzer.lruCapacity": {
          "type": [
            "null",
            "integer"
          ],
          "default": null,
          "minimum": 0,
          "exclusiveMinimum": true,
          "description": "Number of syntax trees rust-analyzer keeps in memory."
        },
        "rust-analyzer.files.watcher": {
          "type": "string",
          "enum": [
            "client",
            "notify"
          ],
          "default": "client",
          "description": "Controls file watching implementation."
        },
        "rust-analyzer.files.exclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Paths to exclude from analysis."
        },
        "rust-analyzer.notifications.cargoTomlNotFound": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to show `can't find Cargo.toml` error message"
        },
        "rust-analyzer.cargo.autoreload": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Automatically refresh project info via `cargo metadata` on Cargo.toml changes"
        },
        "rust-analyzer.cargo.noDefaultFeatures": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Do not activate the `default` feature"
        },
        "rust-analyzer.cargo.allFeatures": {
          "type": "boolean",
          "default": false,
          "description": "Activate all available features"
        },
        "rust-analyzer.cargo.features": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "List of features to activate"
        },
        "rust-analyzer.cargo.loadOutDirsFromCheck": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Run `cargo check` on startup to get the correct value for package OUT_DIRs"
        },
        "rust-analyzer.procMacro.enable": {
          "description": "Enable Proc macro support, cargo.loadOutDirsFromCheck must be enabled.",
          "type": "boolean",
          "default": false
        },
        "rust-analyzer.cargo.target": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "Specify the compilation target"
        },
        "rust-analyzer.rustfmt.extraArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional arguments to rustfmt"
        },
        "rust-analyzer.rustfmt.overrideCommand": {
          "type": [
            "null",
            "array"
          ],
          "items": {
            "minItems": 1,
            "type": "string"
          },
          "default": null,
          "markdownDescription": "Advanced option, fully override the command rust-analyzer uses for formatting."
        },
        "rust-analyzer.checkOnSave.enable": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Run specified `cargo check` command for diagnostics on save"
        },
        "rust-analyzer.checkOnSave.extraArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "markdownDescription": "Extra arguments for `cargo check`",
          "default": []
        },
        "rust-analyzer.checkOnSave.command": {
          "type": "string",
          "default": "check",
          "markdownDescription": "Cargo command to use for `cargo check`"
        },
        "rust-analyzer.checkOnSave.overrideCommand": {
          "type": [
            "null",
            "array"
          ],
          "items": {
            "minItems": 1,
            "type": "string"
          },
          "default": null,
          "markdownDescription": "Advanced option, fully override the command rust-analyzer uses for checking. The command should include `--message=format=json` or similar option."
        },
        "rust-analyzer.checkOnSave.allTargets": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Check all targets and tests (will be passed as `--all-targets`)"
        },
        "rust-analyzer.checkOnSave.noDefaultFeatures": {
          "type": [
            "null",
            "boolean"
          ],
          "default": null,
          "markdownDescription": "Do not activate the `default` feature"
        },
        "rust-analyzer.checkOnSave.allFeatures": {
          "type": [
            "null",
            "boolean"
          ],
          "default": null,
          "markdownDescription": "Check with all features (will be passed as `--all-features`). Defaults to `rust-analyzer.cargo.allFeatures`."
        },
        "rust-analyzer.checkOnSave.features": {
          "type": [
            "null",
            "array"
          ],
          "items": {
            "type": "string"
          },
          "default": null,
          "description": "List of features to activate. Defaults to `rust-analyzer.cargo.features`."
        },
        "rust-analyzer.inlayHints.chainingHints": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show inlay type hints for method chains. *Neovim Only*"
        },
        "rust-analyzer.inlayHints.refreshOnInsertMode": {
          "type": "boolean",
          "default": false,
          "description": "Whether to refresh inlayHints on insert mode"
        },
        "rust-analyzer.completion.addCallParenthesis": {
          "type": "boolean",
          "default": true,
          "description": "Whether to add parenthesis when completing functions"
        },
        "rust-analyzer.completion.addCallArgumentSnippets": {
          "type": "boolean",
          "default": true,
          "description": "Whether to add argument snippets when completing functions"
        },
        "rust-analyzer.completion.postfix.enable": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to show postfix snippets like `dbg`, `if`, `not`, etc."
        },
        "rust-analyzer.callInfo.full": {
          "type": "boolean",
          "default": true,
          "description": "Show function name and docs in parameter hints"
        },
        "rust-analyzer.lens.enable": {
          "description": "Whether to show CodeLens in Rust files.",
          "type": "boolean",
          "default": true
        },
        "rust-analyzer.lens.run": {
          "markdownDescription": "Whether to show Run lens. Only applies when `#rust-analyzer.lens.enable#` is set.",
          "type": "boolean",
          "default": true
        },
        "rust-analyzer.lens.implementations": {
          "markdownDescription": "Whether to show Implementations lens. Only applies when `#rust-analyzer.lens.enable#` is set.",
          "type": "boolean",
          "default": true
        },
        "rust-analyzer.serverPath": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "Path to rust-analyzer executable (points to bundled binary by default). If this is set, then \"rust-analyzer.updates.channel\" setting is not used"
        },
        "rust-analyzer.linkedProjects": {
          "markdownDescription": "Disable project auto-discovery in favor of explicitly specified set of projects.  \nElements must be paths pointing to Cargo.toml, rust-project.json, or JSON objects in rust-project.json format",
          "type": "array",
          "items": {
            "type": [
              "string",
              "object"
            ]
          },
          "default": null
        },
        "rust-analyzer.diagnostics.enable": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to show native rust-analyzer diagnostics."
        },
        "rust-analyzer.diagnostics.enableExperimental": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to show experimental rust-analyzer diagnostics that might have more false positives than usual."
        },
        "rust-analyzer.diagnostics.disabled": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "description": "List of rust-analyzer diagnostics to disable",
          "default": []
        },
        "rust-analyzer.diagnostics.warningsAsInfo": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "description": "List of warnings that should be displayed with info severity",
          "default": []
        },
        "rust-analyzer.diagnostics.warningsAsHint": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "description": "List of warnings that should be displayed with hint severity",
          "default": []
        },
        "rust-analyzer.trace.server": {
          "type": "string",
          "scope": "window",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "enumDescriptions": [
            "No traces",
            "Error only",
            "Full log"
          ],
          "default": "off",
          "description": "Trace requests to the rust-analyzer"
        },
        "rust-analyzer.updates.channel": {
          "type": "string",
          "default": "stable",
          "enum": [
            "stable",
            "nightly"
          ],
          "description": "Choose `\"nightly\"` updates to get the latest features and bug fixes every day. While `\"stable\"` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs",
          "enumDescriptions": [
            "`\"stable\"` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general",
            "`\"nightly\"` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**"
          ]
        }
      }
    },
    "commands": [
      {
        "command": "rust-analyzer.analyzerStatus",
        "title": "Status",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.applySnippetWorkspaceEdit",
        "title": "Apply workspace edit",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.memoryUsage",
        "title": "Memory Usage (Clears Database)",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.reloadWorkspace",
        "title": "Reload workspace",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.joinLines",
        "title": "Join lines",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.matchingBrace",
        "title": "Find matching brace",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.parentModule",
        "title": "Locate parent module",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.reload",
        "title": "Restart server",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.run",
        "title": "Run",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.runSingle",
        "title": "Run Single",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.ssr",
        "title": "Structural Search Replace",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.serverVersion",
        "title": "Show current Rust Analyzer server version",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.syntaxTree",
        "title": "Show Syntax Tree",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.toggleInlayHints",
        "title": "Toggle inlay hints on/off",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.upgrade",
        "title": "Upgrade Rust Analyzer from GitHub release",
        "category": "Rust Analyzer"
      },
      {
        "command": "rust-analyzer.expandMacro",
        "title": "Expand macro recursively",
        "category": "Rust Analyzer"
      }
    ]
  }
}
