{
  "rust-analyzer.enable": {
    "type": "boolean",
    "markdownDescription": "Enable `coc-rust-analyzer`",
    "default": true
  },
  "rust-analyzer.disableProgressNotifications": {
    "type": "boolean",
    "default": false,
    "markdownDescription": "Disable initialization and workdone progress notifications"
  },
  "rust-analyzer.disablePullDiagnostic": {
    "type": "boolean",
    "default": true,
    "markdownDescription": "Disable pullDiagnostic feature"
  },
  "rust-analyzer.terminal.startinsert": {
    "type": "boolean",
    "default": false,
    "markdownDescription": "Enter insert mode after terminal displayed"
  },
  "rust-analyzer.debug.runtime": {
    "type": "string",
    "default": "termdebug",
    "enum": ["termdebug", "vimspector", "nvim-dap"],
    "markdownDescription": "Choose which debug runtime to use",
    "enumDescriptions": [
      "`\"termdebug\"` use vim/neovim builtin debugger - gdb",
      "`\"vimspector\"` use vimspector plugin",
      "`\"nvim-dap\"` use nvim-dap plugin"
    ]
  },
  "rust-analyzer.debug.vimspector.configuration.name": {
    "type": "string",
    "default": "launch",
    "markdownDescription": "Specify the name of the vimspector configuration name. The following args will be passed to the configuration: `Executable` and `Args` (both strings)"
  },
  "rust-analyzer.debug.nvimdap.configuration.template": {
    "type": "string",
    "default": "",
    "markdownDescription": "Configuration template used to invoked dap.run([conf](https://github.com/mfussenegger/nvim-dap/blob/0e6b7c47dd70e80793ed39271b2aa712d9366dbc/doc/dap.txt#L656C2-L656C2)). The template will be instantiate like this: `$exe` will be replaced with executable path, `$args` will be replaced with arguments."
  },
  "rust-analyzer.server.path": {
    "type": ["null", "string"],
    "default": null,
    "markdownDescription": "Path to rust-analyzer executable (points to bundled binary by default). If this is set, then \"rust-analyzer.updates.channel\" setting is not used"
  },
  "rust-analyzer.server.extraEnv": {
    "type": ["null", "object"],
    "default": null,
    "markdownDescription": "Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging."
  },
  "rust-analyzer.restartServerOnConfigChange": {
    "markdownDescription": "Whether to restart the server automatically when certain settings that require a restart are changed.",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.trace.server": {
    "type": "string",
    "scope": "window",
    "enum": ["off", "messages", "verbose"],
    "enumDescriptions": ["No traces", "Error only", "Full log"],
    "default": "off",
    "markdownDescription": "Trace requests to the rust-analyzer"
  },
  "rust-analyzer.updates.prompt": {
    "type": ["boolean", "string"],
    "enum": [true, false, "neverDownload"],
    "default": true,
    "markdownDescription": "Prompt the user before downloading rust-analyzer"
  },
  "rust-analyzer.updates.checkOnStartup": {
    "type": "boolean",
    "default": true,
    "markdownDescription": "Auto-check rust-analyzer updates on startup"
  },
  "rust-analyzer.updates.channel": {
    "type": "string",
    "default": "stable",
    "enum": ["stable", "nightly"],
    "markdownDescription": "Choose `\"nightly\"` updates to get the latest features and bug fixes every day. While `\"stable\"` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs",
    "enumDescriptions": [
      "`\"stable\"` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general",
      "`\"nightly\"` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**"
    ]
  }
}
